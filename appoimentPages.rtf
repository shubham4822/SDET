package pages;

import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;
import java.net.http.*;
import java.net.URI;
import org.json.JSONObject;

public class appointment_Pages {

    private WebDriver driver;
    private HttpClient client = HttpClient.newHttpClient();
    private static final String AUTH_TOKEN = "your_auth_token_here";

    public appointment_Pages(WebDriver driver) {
        this.driver = driver;
    }

    // ===========================
    // Test 1 – Verify Patient Info Section
    // ===========================
    public boolean verifyPatientInfoSection() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement section = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//section[@id='patientInfo']")));
            return section.isDisplayed();
        } catch (Exception e) {
            return false;
        }
    }

    // ===========================
    // Test 2 – Verify Appointment Header
    // ===========================
    public boolean verifyAppointmentHeader() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement header = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h2[contains(text(),'Appointment')]")));
            return header.isDisplayed();
        } catch (Exception e) {
            return false;
        }
    }

    // ===========================
    // Test 3 – Verify Save Button
    // ===========================
    public boolean verifySaveButton() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement btn = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='saveBtn']")));
            return btn.isDisplayed();
        } catch (Exception e) {
            return false;
        }
    }

    // ===========================
    // Test 4 – Scroll to Care of Person Contact
    // ===========================
    public boolean scrollToBottomAndVerifyFieldAndHighlight() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement patientInfo = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("patientInfo")));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", patientInfo);

            WebElement careOfPersonTextbox = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("careOfPersonContact")));
            ((JavascriptExecutor) driver).executeScript("arguments[0].style.border='3px solid red'", careOfPersonTextbox);

            return careOfPersonTextbox.isDisplayed();
        } catch (Exception e) {
            return false;
        }
    }

    // ===========================
    // Test 5 – Verify Placeholder of Care of Person Contact
    // ===========================
    public String verifyPlaceholderNameOfTextbox() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement careOfPersonTextbox = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("careOfPersonContact")));
            return careOfPersonTextbox.getAttribute("placeholder");
        } catch (Exception e) {
            return "";
        }
    }

    // ===========================
    // Test 6 – Verify Dropdown Appointment Type
    // ===========================
    public boolean verifyAppointmentTypeDropdown() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement dropdown = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[@id='appointmentType']")));
            return dropdown.isDisplayed();
        } catch (Exception e) {
            return false;
        }
    }

    // ===========================
    // Test 7 – Verify Calendar Icon
    // ===========================
    public boolean verifyCalendarIcon() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement calendar = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@id='appointmentDate']//following-sibling::button")));
            return calendar.isDisplayed();
        } catch (Exception e) {
            return false;
        }
    }

    // ===========================
    // Test 8 – Verify Notes Textarea
    // ===========================
    public boolean verifyNotesTextbox() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement notes = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//textarea[@id='notes']")));
            return notes.isDisplayed();
        } catch (Exception e) {
            return false;
        }
    }

    // ===========================
    // Test 9 – Verify Success Notification Popup
    // ===========================
    public String verifySuccessNotificationPopupMessage() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement popup = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@class='notification success']")));
            return popup.getText();
        } catch (Exception e) {
            return "";
        }
    }

    // ===========================
    // Test 10 – Create Appointment with Auth (POST)
    // ===========================
    public CustomResponse createAppointmentWithAuth(String endpoint, String body) {
        Response response = null;
        int statusCode = 0;
        String status = "";
        String resultMessage = "";

        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Authorization", "Bearer " + AUTH_TOKEN)
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(body))
                    .build();

            HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
            statusCode = httpResponse.statusCode();
            resultMessage = httpResponse.body();
            status = (statusCode == 201) ? "Success" : "Failed";

        } catch (Exception e) {
            resultMessage = "Error: " + e.getMessage();
            status = "Failed";
        }
        return new CustomResponse(response, statusCode, status, resultMessage);
    }

    // ===========================
    // Test 11 – Cancel Appointment with Auth (PUT)
    // ===========================
    public CustomResponse cancelAppointmentWithAuth(String endpoint, String body) {
        Response response = null;
        int statusCode = 0;
        String status = "";
        String resultMessage = "";

        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Authorization", "Bearer " + AUTH_TOKEN)
                    .header("Content-Type", "application/json")
                    .PUT(HttpRequest.BodyPublishers.ofString(body))
                    .build();

            HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
            statusCode = httpResponse.statusCode();
            resultMessage = httpResponse.body();
            status = (statusCode == 200) ? "Success" : "Failed";

        } catch (Exception e) {
            resultMessage = "Error: " + e.getMessage();
            status = "Failed";
        }
        return new CustomResponse(response, statusCode, status, resultMessage);
    }

    // ===========================
    // Test 12 – Search Patient with Auth (GET + Params)
    // ===========================
    public CustomResponse searchPatientWithAuth(String endpoint) {
        Response response = null;
        int statusCode = 0;
        String status = "";
        String resultMessage = "";

        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Authorization", "Bearer " + AUTH_TOKEN)
                    .GET()
                    .build();

            HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
            statusCode = httpResponse.statusCode();
            resultMessage = httpResponse.body();
            status = (statusCode == 200) ? "Success" : "Failed";

        } catch (Exception e) {
            resultMessage = "Error: " + e.getMessage();
            status = "Failed";
        }
        return new CustomResponse(response, statusCode, status, resultMessage);
    }

    // ===========================
    // Test 13 – Update Appointment
    // ===========================
    public CustomResponse updateAppointmentWithAuth(String endpoint, Object body) {
        return performPutRequest(endpoint, body);
    }

    // ===========================
    // Test 14 – Delete Appointment
    // ===========================
    public CustomResponse deleteAppointmentWithAuth(String endpoint) {
        return performDeleteRequest(endpoint);
    }

    // ===========================
    // Test 15 – Get Appointment by ID
    // ===========================
    public CustomResponse getAppointmentById(String endpoint) {
        return performGetRequest(endpoint);
    }

    // ===========================
    // Test 16 – List Appointments for Patient
    // ===========================
    public CustomResponse listAppointmentsForPatient(String endpoint) {
        return performGetRequest(endpoint);
    }

    // ===========================
    // Test 17 – Create Patient
    // ===========================
    public CustomResponse createPatientWithAuth(String endpoint, Object body) {
        return performPostRequest(endpoint, body);
    }

    // ===========================
    // Test 18 – Update Patient
    // ===========================
    public CustomResponse updatePatientWithAuth(String endpoint, Object body) {
        return performPutRequest(endpoint, body);
    }

    // ===========================
    // Test 19 – Delete Patient
    // ===========================
    public CustomResponse deletePatientWithAuth(String endpoint) {
        return performDeleteRequest(endpoint);
    }

    // ===========================
    // Test 20 – Get Patient by ID
    // ===========================
    public CustomResponse getPatientById(String endpoint) {
        return performGetRequest(endpoint);
    }

    // ===========================
    // 🔹 Helper Methods for API Calls
    // ===========================
    private CustomResponse performGetRequest(String endpoint) {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Authorization", "Bearer " + AUTH_TOKEN)
                    .GET()
                    .build();
            HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
            return new CustomResponse(null, httpResponse.statusCode(), "Success", httpResponse.body());
        } catch (Exception e) {
            return new CustomResponse(null, 500, "Failed", "Error: " + e.getMessage());
        }
    }

    private CustomResponse performPostRequest(String endpoint, Object body) {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Authorization", "Bearer " + AUTH_TOKEN)
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(new JSONObject(body).toString()))
                    .build();
            HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
            return new CustomResponse(null, httpResponse.statusCode(), "Success", httpResponse.body());
        } catch (Exception e) {
            return new CustomResponse(null, 500, "Failed", "Error: " + e.getMessage());
        }
    }

    private CustomResponse performPutRequest(String endpoint, Object body) {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Authorization", "Bearer " + AUTH_TOKEN)
                    .header("Content-Type", "application/json")
                    .PUT(HttpRequest.BodyPublishers.ofString(new JSONObject(body).toString()))
                    .build();
            HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
            return new CustomResponse(null, httpResponse.statusCode(), "Success", httpResponse.body());
        } catch (Exception e) {
            return new CustomResponse(null, 500, "Failed", "Error: " + e.getMessage());
        }
    }

    private CustomResponse performDeleteRequest(String endpoint) {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Authorization", "Bearer " + AUTH_TOKEN)
                    .DELETE()
                    .build();
            HttpResponse<String> httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());
            return new CustomResponse(null, httpResponse.statusCode(), "Success", httpResponse.body());
        } catch (Exception e) {
            return new CustomResponse(null, 500, "Failed", "Error: " + e.getMessage());
        }
    }
}
